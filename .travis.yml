# This is the complex Travis configuration, which is intended for use
# on open source libraries which need compatibility across multiple GHC
# versions, must work with cabal-install, and should be
# cross-platform. For more information and other options, see:
#
# https://docs.haskellstack.org/en/stable/travis_ci/
#
# Copy these contents into the root directory of your Github project in a file
# named .travis.yml

# Use new container infrastructure to enable caching
sudo: false

# Do not choose a language; we provide our own build tools.
language: generic

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  - $TRAVIS_BUILD_DIR/.stack-work

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # We grab the appropriate GHC and cabal-install versions from hvr's PPA. See:
  # https://github.com/hvr/multi-ghc-travis
  - env: BUILD=cabal GHCVER=8.2.2 CABALVER=2.4
    compiler: ": #GHC 8.2.2"
    addons: {apt: {packages: [cabal-install-2.4,ghc-8.2.2], sources: [hvr-ghc]}}

  - env: BUILD=cabal GHCVER=8.4.4 CABALVER=2.4
    compiler: ": #GHC 8.4.4"
    addons: {apt: {packages: [cabal-install-2.4,ghc-8.4.4], sources: [hvr-ghc]}}

  # Build with the newest GHC and cabal-install. This is an accepted failure,
  # see below.
  # - env: BUILD=cabal GHCVER=head  CABALVER=head
  #  compiler: ": #GHC HEAD"
  #  addons: {apt: {packages: [cabal-install-head,ghc-head], sources: [hvr-ghc]}}

  - env: BUILD=stack ARGS="--resolver lts-12"
    compiler: ": #stack 8.4.4"
    addons: {apt: {packages: [libgmp-dev]}}

  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}

  # Build on macOS in addition to Linux
  - env: BUILD=stack ARGS=""
    compiler: ": #stack default osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-12"
    compiler: ": #stack 8.4.4 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly osx"
    os: osx

  allow_failures:
  - env: BUILD=cabal GHCVER=head  CABALVER=head
  - env: BUILD=stack ARGS="--resolver nightly"

before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC

# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

# Download and unpack the stack executable
- export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
- mkdir -p ~/.local/bin
- |
  if [ `uname` = "Darwin" ]
  then
    travis_retry curl --insecure -L https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    travis_retry curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi

  # Use the more reliable S3 mirror of Hackage
  mkdir -p $HOME/.cabal
  echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
  echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config


install:
- echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
- if [ -f configure.ac ]; then autoreconf -i; fi
- |
  set -ex
  case "$BUILD" in
    stack)
      # Add in extra-deps for older snapshots, as necessary
      stack --no-terminal --install-ghc $ARGS test --bench --dry-run || ( \
        stack --no-terminal $ARGS build cabal-install && \
        stack --no-terminal $ARGS solver --update-config)

      # Build the dependencies
      stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
      ;;
    cabal)
      cabal --version
      travis_retry cabal update

      # Get the list of packages from the stack.yaml file. Note that
      # this will also implicitly run hpack as necessary to generate
      # the .cabal files needed by cabal-install.
      PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')

      cabal install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES
      ;;
  esac
  set +ex

script:
- |
  set -ex
  case "$BUILD" in
    stack)
      stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
      ;;
    cabal)
      cabal install --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES

      ORIGDIR=$(pwd)
      for dir in $PACKAGES
      do
        cd $dir
        cabal check || [ "$CABALVER" == "1.16" ]
        cabal sdist
        PKGVER=$(cabal info . | awk '{print $2;exit}')
        SRC_TGZ=$PKGVER.tar.gz
        cd dist
        tar zxfv "$SRC_TGZ"
        cd "$PKGVER"
        cabal configure --enable-tests --ghc-options -O0
        cabal build
        if [ "$CABALVER" = "1.16" ] || [ "$CABALVER" = "1.18" ]; then
          cabal test
        else
          cabal test --show-details=streaming --log=/dev/stdout
        fi
        cd $ORIGDIR
      done
      ;;
  esac
  set +ex

notifications:
  email:
    recipients:
      secure: "DZKp2uKxT2/807752ZknAlaHFUwb5QzthDjhCd9WTKptujZGTn2kBNr48dgKvTXD4IU4Agyd9yF1acxe2/w/0yrBeLXWZTFP2al0wr17o0zCQRVbRvT/EpROjmxX/BSWnAI3FNgOnczVSotbcMsAUjBRjteu68WDfDuxGVnR06OgSS14UKMwQLnyFYlic5EiMVXcani28RPp1+oDapI8pmoDHYzITH5plGYxa/SNMll3xDLjFRKoZAKTxkoDZiArPElk7LaRFTe0lGN16tQlg7hHCI976osKBjSzRI1xvAz/gYWnHOFRicons/a1F/UDHJYHLZHn992j7OMs9eb5NvxEPfddT7TR49HzuGU2i4Ls2ePUI5p93CfFzsW8Qn4PcPUM/pxdHZzqZsQBjKqdjM8cjsLVPe9umPcJD4lcgY6sTwoz9+2IDiXvHBRthDu5rkBY1brU65t40Z41YUTIJ0ihO0AQ7GrUEjhc5A0iWgoH++v1ch6GBgM8OuNx6nEZ6U3j8QM3blE2HFK24H6OuoldD1ACL40bch03icJyWCnbQ2uhG14BAI4cQ/61J/QbxxZkZhPdvyjylKmjMDEuyl3F2pkZAq0GVk2/TpNxWG8KGic2jASHp8tsphzJtFDIwMWU4pZ+0h/+Ssuglid7s03tJ7xWGE1D1BB8pEGkh3A="
    on_success: change
    on_failure: always

deploy:
  - provider: releases
    api_key:
      secure: "XW+7ZdvVwq+MGxcFKs91SrL6p4U2FuU0+pSqowsD3tvyguOgR52CgMyoc7WV3AYThJ4sKxMgKy76ckGXVsQrwtJh8yiRo1fmMsx/3YgcCj+8CdlcxP8jh1jM9aO1Kk91rnhbgu4cQ2pBZCrs3d9Pgu+eEmkpryh+4xnYLdViUVqi4qz+/c3y+b3jbwv5vrqJYc8VCKKolMVEbTHCWU+HnvfVee49VDyQVFChixSVMVqp6aYCppqrpQjMF8Y3JdAO+p3XA0dLJbj3+8+tbX8qRspigIZY+WlCPv4/6sXqGb4S3UqVSBZIBl2+whXMc/3LfXcjHOQCbKsq9JzHN+F8vA4+TdFfLLTf3/C9FmLH83EV8ZL9rNfjPYgqrcHepSJz2mQV5uWhhCWgJ1MZJQFjzmVw+4kgVsjmUwLn7kEVY53WS3ez9gs7FhNSh/B9c0YlclOq83z1RChZ24wqQXBFTB9X8+skWCDyvq0zOO7lbkOmOwK7iyQdGVLCWRlOToS759WOyD1qlI0uRXWlMLFy4gAS19ECzwpMj8nCMdqGFBfXmCq0xfx9EUD/DVcdgjS7LXGEh/AnxspZuzgq95MNNFuz+iTJTHojTp8m6sIESFWjWnTZlm4ZzEjWgO49LsKElnvWESRY9vtEAGQO60oxT6hgxU52FFkQGbstZALh9i0="
    file_glob: true
    file: /home/travis/build/MarcFontaine/wsjtx-to-mqtt/.stack-work/dist/x86_64-linux/*/wsjtx-to-mqtt*.tar.gz
    skip_cleanup: true
    on:
      tags: true
